[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cluster-search",
    "section": "",
    "text": "You can install via pip with the following command:\npip install cluster-search"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "cluster-search",
    "section": "How to use",
    "text": "How to use\nBelow is an example of using grid_search to perform grid search over some clustering models and model parameters to find the highest silhouette score when clustering a sample of the iris dataset:\n\nfrom sklearn import datasets\nfrom cluster_search.cluster_grid_search import cluster, grid_search\n\n\nfrom sklearn import datasets\niris = datasets.load_iris(as_frame=True)\nX = iris.data\nX.head(5)\n\n\n\n\n\n  \n    \n      \n      sepal length (cm)\n      sepal width (cm)\n      petal length (cm)\n      petal width (cm)\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n    \n  \n\n\n\n\n\ncluster_models = [\n    cluster.KMeans,\n    cluster.AffinityPropagation\n]\n\nmodel_kwargs_list = [\n    {\"n_clusters\": [2, 3, 4], \"init\": [\"k-means++\", \"random\"]},\n    {\"damping\": [0.6, 0.7, 0.8]}\n]\n\n\ngrid_search(\n    data_to_cluster=X,\n    cluster_models=cluster_models,\n    model_kwargs_list=model_kwargs_list,\n    sort=True,\n    highlight=True\n)\n\n0it [00:00, ?it/s]\n  0%|                                               | 0/6 [00:00<?, ?it/s]\n100%|███████████████████████████████████████| 6/6 [00:00<00:00, 57.06it/s]\n1it [00:00,  9.21it/s]\n100%|███████████████████████████████████████| 3/3 [00:00<00:00, 77.47it/s]\n2it [00:00, 13.37it/s]\n\n\n\n\n\n  \n    \n       \n      cluster_model\n      model_params\n      avg_silhouette_score\n    \n  \n  \n    \n      0\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 2}\n      0.681046\n    \n    \n      3\n      KMeans\n      {'init': 'random', 'n_clusters': 2}\n      0.681046\n    \n    \n      1\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 3}\n      0.552819\n    \n    \n      4\n      KMeans\n      {'init': 'random', 'n_clusters': 3}\n      0.552819\n    \n    \n      5\n      KMeans\n      {'init': 'random', 'n_clusters': 4}\n      0.498051\n    \n    \n      2\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 4}\n      0.497455\n    \n    \n      7\n      AffinityPropagation\n      {'damping': 0.7}\n      0.474338\n    \n    \n      8\n      AffinityPropagation\n      {'damping': 0.8}\n      0.468801\n    \n    \n      6\n      AffinityPropagation\n      {'damping': 0.6}\n      0.345462"
  },
  {
    "objectID": "cluster_grid_search.html",
    "href": "cluster_grid_search.html",
    "title": "cluster_grid_search module",
    "section": "",
    "text": "The iris dataset is used below as an example of some data to cluster"
  },
  {
    "objectID": "cluster_grid_search.html#clustering",
    "href": "cluster_grid_search.html#clustering",
    "title": "cluster_grid_search module",
    "section": "Clustering",
    "text": "Clustering\n\n\nassign_cluster_labels\n\n assign_cluster_labels\n                        (data_to_cluster:Union[pandas.core.frame.DataFrame\n                        ,numpy.ndarray,list],\n                        cluster_model:sklearn.base.ClusterMixin,\n                        model_kwargs:dict)\n\nAssigns cluster labels to data_to_cluster using specified cluster_model\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndata_to_cluster\nUnion\nData points to cluster\n\n\ncluster_model\nClusterMixin\nSk-learn clustering model. Must be specified in the format cluster.model, e.g cluster.KMeans\n\n\nmodel_kwargs\ndict\nKeyword arguments for sk-learn clustering model\n\n\nReturns\nndarray\nLabel assignments\n\n\n\nWe can use the assign_cluster_labels function to assign cluster labels. The function can accept any sk-learn clustering model and you can specify any parameters for the model in the model_kwargs argument. See an example below that assigns labels to the iris dataset:\n\nlabels = assign_cluster_labels(X, cluster.KMeans, {\"n_clusters\": 4})\nlabels\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 3, 0, 3,\n       0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 0, 3, 3, 3,\n       0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 2, 3, 2, 2, 2, 2, 0, 2, 2, 2,\n       3, 3, 2, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 3, 2, 2, 2, 2,\n       2, 3, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3], dtype=int32)"
  },
  {
    "objectID": "cluster_grid_search.html#silhouette-score-validity-of-clusters",
    "href": "cluster_grid_search.html#silhouette-score-validity-of-clusters",
    "title": "cluster_grid_search module",
    "section": "Silhouette Score – Validity of Clusters",
    "text": "Silhouette Score – Validity of Clusters\n\n\ncalculate_silhouette_avg\n\n calculate_silhouette_avg\n                           (data:Union[pandas.core.frame.DataFrame,numpy.n\n                           darray,list], cluster_labels:numpy.ndarray)\n\nCalculate the average silhouette score\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nUnion\nThe data that was used for the clustering\n\n\ncluster_labels\nndarray\nCluster labels\n\n\nReturns\nfloat\nAverage silhouette score\n\n\n\nWe can use the average silhouette score as a measure of the validity of our clusters. It can be used to select an approriate number of clusters. Values range from -1 to +1, where a higher value indicates that the points are on average far away from clusters that aren’t their own. Negative values indicate that there is a lot of overlap between the clusters.\nBelow is an example using the calculate_silhouette_avg on the iris example dataset and the assigned cluster labels from our clustering above.\n\ncalculate_silhouette_avg(X, labels)\n\n0.49805050499728776"
  },
  {
    "objectID": "cluster_grid_search.html#grid-search",
    "href": "cluster_grid_search.html#grid-search",
    "title": "cluster_grid_search module",
    "section": "Grid Search",
    "text": "Grid Search\n\n\ngrid_search\n\n grid_search\n              (data_to_cluster:Union[pandas.core.frame.DataFrame,numpy.nda\n              rray,list], cluster_models:list, model_kwargs_list:list,\n              highlight:bool, sort:bool)\n\nPerform grid search for the specified clustering models and parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndata_to_cluster\nUnion\nData points to cluster\n\n\ncluster_models\nlist\nList of Sk-learn clustering models to iterate through. Each model must be specified in the format cluster.model, e.g cluster.KMeans\n\n\nmodel_kwargs_list\nlist\nList of dicts of keyword arguments for the sk-learn clustering models to iterate through.\n\n\nhighlight\nbool\nTrue to highlight highest avg_silhouette_score\n\n\nsort\nbool\nTrue to sort by highest avg_silhouette_score\n\n\nReturns\nDataFrame\nTable showing avg_silhouette_score for each model and parameter specified\n\n\n\nWe can use the grid_search function to optimise for the highest silhouette score across different sk-learn clustering models and different parameters. An example is below.\nThe cluster models list and model kwargs list that will be passed into grid_search function should be in the form below. The order of the two lists should relate to each other.\n\ncluster_models = [\n    cluster.KMeans,\n    cluster.AffinityPropagation\n]\n\nmodel_kwargs_list = [\n    {\"n_clusters\": [2, 3, 4], \"init\": [\"k-means++\", \"random\"]},\n    {\"damping\": [0.6, 0.7, 0.8]}\n]\n\nWe can then use the grid_search function to perform grid search over the models and kwargs to find the highest silhouette score:\n\ngrid_search(\n    data_to_cluster=X,\n    cluster_models=cluster_models,\n    model_kwargs_list=model_kwargs_list,\n    sort=True,\n    highlight=True\n)\n\n0it [00:00, ?it/s]\n  0%|                                               | 0/6 [00:00<?, ?it/s]\n100%|███████████████████████████████████████| 6/6 [00:00<00:00, 31.68it/s]\n1it [00:00,  5.14it/s]\n100%|███████████████████████████████████████| 3/3 [00:00<00:00, 67.43it/s]\n2it [00:00,  8.26it/s]\n\n\n\n\n\n  \n    \n       \n      cluster_model\n      model_params\n      avg_silhouette_score\n    \n  \n  \n    \n      0\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 2}\n      0.681046\n    \n    \n      3\n      KMeans\n      {'init': 'random', 'n_clusters': 2}\n      0.681046\n    \n    \n      1\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 3}\n      0.552819\n    \n    \n      4\n      KMeans\n      {'init': 'random', 'n_clusters': 3}\n      0.552819\n    \n    \n      5\n      KMeans\n      {'init': 'random', 'n_clusters': 4}\n      0.498051\n    \n    \n      2\n      KMeans\n      {'init': 'k-means++', 'n_clusters': 4}\n      0.497455\n    \n    \n      7\n      AffinityPropagation\n      {'damping': 0.7}\n      0.474338\n    \n    \n      8\n      AffinityPropagation\n      {'damping': 0.8}\n      0.468801\n    \n    \n      6\n      AffinityPropagation\n      {'damping': 0.6}\n      0.345462"
  }
]